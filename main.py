import json

import telebot
from telebot import types
from datetime import datetime, timedelta
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from handlers import user_data
from settings import API_TOKEN

bot = telebot.TeleBot(API_TOKEN, )


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –Ω–µ –ø—É—Ç–∞—Ç—å —Å –∫–ª–∞—Å—Å–æ–º, –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–º –æ—Ç InlineKeyboardMarkup
class UserStates:
    CONFIRMATION = 'confirmation'
    MODEL = 'model'
    NUMBER = 'number'
    CHOOSING_YEAR = 1
    CHOOSING_MONTH = 2
    CHOOSING_DAY = 3
    SERVICE = 'service'
    CONFIRM = 'confirm'
    CONTACT = 'contact'


@bot.message_handler(commands=['start'])
def start(message: telebot.types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¢–û'))
    bot.send_message(message.chat.id,
                     f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.first_name}! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Auto-Detail_Bot,\n"
                     "–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¢–û?", reply_markup=markup)


# Handle the "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¢–û" button click
@bot.message_handler(func=lambda message: message.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¢–û")
def handle_appointment(message):
    # Hide the keyboard and ask for car model
    bot.send_message(message.chat.id,
                     "üöó –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
                     reply_markup=types.ReplyKeyboardRemove())

    # Set state to MODEL
    if message.chat.id not in user_data:
        user_data[message.chat.id] = {}
    user_data[message.chat.id]['state'] = UserStates.MODEL

    # Register the next step handler to get the car model
    bot.register_next_step_handler(message, get_car_model)


# Get car model from user
def get_car_model(message):
    user_data[message.chat.id]['model'] = message.text

    bot.send_message(
        message.chat.id,
        f"üëå –û—Ç–ª–∏—á–Ω–æ! –ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å: {user_data[message.chat.id]['model']}\n"
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è(–•111–•–•136/36):"
    )

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[message.chat.id]['state'] = UserStates.NUMBER

    bot.register_next_step_handler(message, get_car_number)


def get_car_number(message):
    user_data[message.chat.id]['number'] = message.text

    bot.send_message(
        message.chat.id,
        f"–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å: {user_data[message.chat.id]['model']}\n"
        f"–ì–æ—Å–Ω–æ–º–µ—Ä: {user_data[message.chat.id]['number']}\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:"
    )

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≥–æ–¥–∞
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", reply_markup=generate_years())


# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞
def generate_years():
    markup = InlineKeyboardMarkup()
    current_year = datetime.now().year
    for year in range(current_year, current_year + 2):
        markup.add(InlineKeyboardButton(text=str(year), callback_data=f"year_{year}"))
    return markup


# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
def generate_months():
    markup = InlineKeyboardMarkup()
    months = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å',
              '–î–µ–∫–∞–±—Ä—å']
    for i, month in enumerate(months, start=1):
        markup.add(InlineKeyboardButton(text=month, callback_data=f"month_{i}"))
    return markup


def generate_calendar(year, month):
    markup = InlineKeyboardMarkup()
    num_days = (datetime(year, month % 12 + 1, 1) - timedelta(days=1)).day
    for day in range(1, num_days + 1):
        markup.add(InlineKeyboardButton(text=str(day), callback_data=f"date_{year}_{month}_{day}"))
    return markup


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞


@bot.callback_query_handler(func=lambda call: call.data.startswith('year_'))
def year_callback(call):
    chat_id = call.message.chat.id
    year = call.data.split('_')[1]
    user_data[chat_id]['year'] = year
    user_data[chat_id]['state'] = UserStates.CHOOSING_MONTH

    markup = types.InlineKeyboardMarkup(row_width=4)
    months = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
              '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ü–∏–∫–ª–µ, –∏—Å–ø–æ–ª—å–∑—É—è f-—Å—Ç—Ä–æ–∫–∏ –¥–ª—è callback_data
    markup.add(*[types.InlineKeyboardButton(month, callback_data=f'month_{i:02}') for i, month in enumerate(months, 1)])

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞

@bot.callback_query_handler(func=lambda call: call.data.startswith('month_'))
def month_callback(call):
    chat_id = call.message.chat.id
    month = call.data.split('_')[1]
    user_data[chat_id]['month'] = month
    user_data[chat_id]['state'] = UserStates.CHOOSING_DAY

    markup = types.InlineKeyboardMarkup(row_width=7)  # –ö–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ –ø–æ 7 –¥–Ω–µ–π
    days = [str(i) for i in range(1, 31)]  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–Ω–∏ —á–∏—Å–ª–∞–º–∏

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–Ω–µ–π —Å –ø–æ–º–æ—â—å—é —Å–ø–∏—Å–∫–æ–≤–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è
    buttons = [types.InlineKeyboardButton(day, callback_data=f'date_{user_data[chat_id]["year"]}_{month}_{day}') for day
               in days]
    markup.add(*buttons)  # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –≤ markup.add()

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('date_'))
def date_callback(call):
    chat_id = call.message.chat.id
    try:
        _, year, month, day = call.data.split('_')
        user_data[chat_id]['year'] = year
        user_data[chat_id]['month'] = month
        user_data[chat_id]['day'] = day

        bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {day}.{month}.{year}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å.")
        user_data[chat_id]['state'] = UserStates.CONFIRMATION

        confirm_markup = types.InlineKeyboardMarkup()
        confirm_markup.add(types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='confirm'))
        bot.send_message(chat_id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –∑–∞–ø–∏—Å—å:", reply_markup=confirm_markup)

    except ValueError:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
@bot.callback_query_handler(func=lambda call: call.data == 'confirm')
def confirm_callback(call: CallbackQuery):
    chat_id = call.message.chat.id
    # –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    with open(call.from_user.first_name + "_" +  datetime.now().strftime('%Y.%m.%d') + '.json', 'w',
              encoding='utf-8') as f:
        json.dump(user_data[chat_id], f, ensure_ascii=False, indent=4)
    bot.send_message(chat_id, "üéâ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")


if __name__ == "__main__":
    bot.polling(none_stop=True)
