import psycopg2
import telebot
from telebot import types
from telebot import datetime, timedelta
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = '7390952682:AAGwjw7x7JU07V2w-wjD2ATaR1y8meHGnDE'
bot = telebot.TeleBot(API_TOKEN,)


DATABASE_URL = 'postgresql://Auto-Details:1234@tgbot:5432/users_auto_details'

# States for the FSM
class UserStates(types.InlineKeyboardMarkup):
    CONFIRMATION = 'confirmation'
    MODEL = 'model'
    NUMBER = 'number'
    DATE = 'date'
    TYPE = 'type'
    SERVICE = 'service'
    CONFIRM = 'confirm'
    CONTACT = 'contact'

# Dictionary to store user data
user_data = {}

# ----------------------- Handlers -----------------------

def get_db_connection():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL."""
    try:
        conn = psycopg2.connect(DATABASE_URL)
        return conn
    except (Exception, psycopg2.Error) as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL:", error)
        return None

@bot.message_handler(commands=['start'])
def start(message: telebot.types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¢–û'))
    bot.send_message(message.chat.id,
                     "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Auto-Detail_Bot,\n"
                     " –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¢–û?", reply_markup=markup)

# Handle the "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¢–û" button click
@bot.message_handler(func=lambda message: message.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¢–û")
def handle_appointment(message):
    # Hide the keyboard and ask for car model
    bot.send_message(message.chat.id,
                     "üöó –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Toyota Camry):",
                     reply_markup=types.ReplyKeyboardRemove())

    # Set state to MODEL
    bot.set_state(message.chat.id, UserStates.MODEL)

    # Register the next step handler to get the car model
    bot.register_next_step_handler(message, get_car_model)

# Get car model from user
def get_car_model(message):
    user_data[message.chat.id] = {} # Initialize user data
    user_data[message.chat.id]['model'] = message.text

    bot.send_message(message.chat.id, f"üëå –û—Ç–ª–∏—á–Ω–æ! –ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å: {user_data[message.chat.id]['model']}\n"
                                   f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")

    # Set state to NUMBER
    bot.set_state(message.chat.id, UserStates.NUMBER)

    bot.register_next_step_handler(message, generate_calendar)

# Get car number from user
def generate_calendar(year=None, month=None):
    """Generates an inline calendar keyboard."""
    if year is None:
        year = datetime.now().year
    if month is None:
        month = datetime.now().month

    # Get the first and last days of the month
    first_day = datetime(year, month, 1)
    last_day = datetime(year, month, 1) + timedelta(days=32)

    # Create the inline keyboard
    markup = InlineKeyboardMarkup(row_width=7)

    # Add previous and next month buttons
    if month > 1:
        markup.add(InlineKeyboardButton("<<", callback_data=f"prev_{year}_{month - 1}"))
    else:
        markup.add(InlineKeyboardButton("<<", callback_data=f"prev_{year - 1}_{12}"))
    markup.add(InlineKeyboardButton(f"{datetime(year, month, 1).strftime('%B')} {year}", callback_data="current"))
    if month < 12:
        markup.add(InlineKeyboardButton(">>", callback_data=f"next_{year}_{month + 1}"))
    else:
        markup.add(InlineKeyboardButton(">>", callback_data=f"next_{year + 1}_{1}"))

    # Add days of the week
    markup.add(*[InlineKeyboardButton(day.strftime('%a'), callback_data="week") for day in [first_day + timedelta(days=i) for i in range(7)]])

    # Add days of the month
    for day in range(1, 32):
        current_day = first_day + timedelta(days=day)
        if current_day.month == month:
            markup.add(InlineKeyboardButton(str(current_day.day), callback_data=f"{current_day.strftime('%Y-%m-%d')}"))
        else:
            break
    return markup

# Handle date and time input
@bot.message_handler(func=lambda message: bot.get_state(message.chat.id) == UserStates.DATE)
def get_date_and_time(message):
    # Send the calendar
    bot.send_message(message.chat.id, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=generate_calendar())

    # Set state to DATE
    bot.set_state(message.chat.id, UserStates.DATE)

    # Register the next step handler to get the date and time
    # (The handler will be called when the user clicks a date button)
    # bot.register_next_step_handler(message, get_time)

# Handle calendar button clicks
@bot.callback_query_handler(func=lambda call: True)
def handle_calendar_click(call):
    # Get the user's state
    user_state = bot.get_state(call.message.chat.id)

    if user_state == UserStates.DATE:
        # Handle date selection
        if call.data.startswith("prev") or call.data.startswith("next"):
            # Update the calendar
            year, month = [int(x) for x in call.data.split('_')[1:]]
            new_calendar = generate_calendar(year, month)
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=new_calendar)
        elif call.data == "current":
            # Do nothing
            pass
        elif call.data.isdigit():
            # User selected a date
            selected_date = call.data
            user_data[call.message.chat.id]['date'] = selected_date
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                   text=f"üìÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date}\n"
                                   f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00):")
            bot.set_state(call.message.chat.id, UserStates.DATE)
            bot.register_next_step_handler(call.message, get_time)


@bot.message_handler(func=lambda message: bot.get_state(message.chat.id) == UserStates.DATE)
def get_time(message):
    try:
        # Extract the time from the user's input
        time_obj = datetime.strptime(message.text, '%H:%M').time()

        # Construct the date and time string
        date_and_time_str = f"{user_data[message.chat.id]['date']} {time_obj.strftime('%H:%M')}"
        user_data[message.chat.id]['date'] = date_and_time_str

        # Display a confirmation of the date and time
        bot.send_message(message.chat.id, f"üìÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {date_and_time_str}")

        # Proceed to the next step
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–ü–ª–∞–Ω–æ–≤–æ–µ'),
                   types.KeyboardButton('–°—Ä–æ—á–Ω–æ–µ'),
                   types.KeyboardButton('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ'))
        bot.send_message(message.chat.id, "üîß –ö–∞–∫–æ–π —Ç–∏–ø –¢–û –í–∞–º –Ω—É–∂–µ–Ω?", reply_markup=markup)

        # Set state to SERVICE
        bot.set_state(message.chat.id, UserStates.SERVICE)
        bot.register_next_step_handler(message, get_service_type)

    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
        bot.register_next_step_handler(message, get_time)

# Get service type from user
@bot.message_handler(func=lambda message: bot.get_state(message.chat.id) == UserStates.SERVICE)
def get_service_type(message):
    user_data[message.chat.id]['service'] = message.text

    # Confirmation message
    confirmation_msg = f"""
    ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –∑–∞–ø–∏—Å—å:

    –ú–æ–¥–µ–ª—å: {user_data[message.chat.id]['model']}
    –ì–æ—Å–Ω–æ–º–µ—Ä: {user_data[message.chat.id]['number']}
    –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {user_data[message.chat.id]['date']} 
    –¢–∏–ø –¢–û: {user_data[message.chat.id]['service']}

    –í—Å–µ –≤–µ—Ä–Ω–æ?
    """

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–î–∞'), types.KeyboardButton('–ù–µ—Ç'))
    bot.send_message(message.chat.id, confirmation_msg, reply_markup=markup)

    # Set state to CONFIRMATION
    bot.set_state(message.chat.id, UserStates.CONFIRMATION)

    bot.register_next_step_handler(message, process_confirmation)

# Process confirmation from user
@bot.message_handler(func=lambda message: bot.get_state(message.chat.id) == UserStates.CONFIRMATION)
def process_confirmation(message):
    if message.text == '–î–∞':
        # Save appointment to database or perform other actions
        bot.send_message(message.chat.id, "üéâ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    else:
        bot.send_message(message.chat.id, "üòî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    # Reset state
    bot.delete_state(message.chat.id)

    # Clear user data
    del user_data[message.chat.id]

if __name__ == '__main__':
    bot.polling(none_stop=True, interval=0)
#
